name: Check, build (and release) firmware
on: [push, pull_request]
env:
  CARGO_TERM_COLOR: always
jobs:
  picotool:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Run this job only for tags starting with "v"
    steps:
      # Checkout your repository code
      - name: Checkout code
        uses: actions/checkout@v4
      # Install dependencies for building picotool and pico-sdk
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential pkg-config libusb-1.0-0-dev cmake git
      # Clone pico-sdk repository
      - name: Clone pico-sdk repository
        run: |
          git clone --branch master https://github.com/raspberrypi/pico-sdk.git
      # Clone picotool repository
      - name: Clone picotool repository
        run: |
          git clone --branch master https://github.com/raspberrypi/picotool.git
      # Get the latest commit hash for both picotool and pico-sdk
      - name: Get Git commit hashes for caching
        id: hashes
        run: |
          picotool_hash=$(git -C picotool rev-parse HEAD)
          pico_sdk_hash=$(git -C pico-sdk rev-parse HEAD)
          echo "picotool_hash=${picotool_hash}" >> $GITHUB_ENV
          echo "pico_sdk_hash=${pico_sdk_hash}" >> $GITHUB_ENV
      # Cache picotool build outputs based on both repo hashes
      - name: Cache picotool build outputs
        uses: actions/cache@v4
        with:
          path: picotool/build
          key: ${{ runner.os }}-picotool-${{ env.picotool_hash }}-${{ env.pico_sdk_hash }}
      # Skip build if picotool binary exists
      - name: Check if picotool already exists
        run: |
          if [ -f picotool/build/picotool ]; then
            echo "picotool already exists. Skipping build."
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "skip_build=false" >> $GITHUB_ENV
          fi
      # Initialize pico-sdk submodules (for the mbedtls library)
      - name: Initialize pico-sdk submodules
        if: env.skip_build == 'false'
        run: |
          cd pico-sdk
          git submodule update --init lib/mbedtls
      # Set environment variable for pico-sdk path
      - name: Set PICO_SDK_PATH
        if: env.skip_build == 'false'
        run: echo "PICO_SDK_PATH=${{ github.workspace }}/pico-sdk" >> $GITHUB_ENV
      # Build picotool
      - name: Build picotool
        if: env.skip_build == 'false'
        run: |
          cd picotool
          mkdir -p build
          cd build
          cmake ..
          make
      # Upload picotool binary as an artifact
      - name: Upload picotool artifact
        uses: actions/upload-artifact@v4
        with:
          name: picotool
          path: picotool/build/picotool
  lint:
    name: Formatting and linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
          targets: thumbv8m.main-none-eabihf
      - run: cargo fmt -- --check
      # - run: cargo clippy -- -D warnings
      - run: cargo clippy
  build:
    name: Build
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get clean && sudo apt-get update
          sudo apt-get install -y libudev-dev
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: thumbv8m.main-none-eabihf
      - run: cargo install flip-link
      - run: cargo build --all --release
      # Upload picotool binary as an artifact (if it's a release)
      - name: Upload build artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: target/thumbv8m.main-none-eabihf/release/phoenix-16
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v') # Run this job only for tags starting with "v"
    needs: [build, picotool]
    runs-on: ubuntu-latest
    steps:
      - name: Download picotool artifact from picotool workflow
        uses: actions/download-artifact@v4
        with:
          name: picotool
          path: picotool
      - name: Download build artifact from build workflow
        uses: actions/download-artifact@v4
        with:
          name: build
          path: target
      - run: cp target/phoenix-16 target/phoenix-16.elf
      - run: chmod +x picotool/picotool
      - run: picotool/picotool uf2 convert target/phoenix-16.elf target/phoenix-16.uf2
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/phoenix-16.elf
            target/phoenix-16.uf2
          prerelease: true
